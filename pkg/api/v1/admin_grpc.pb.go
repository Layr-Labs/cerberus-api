// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: admin.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Admin_LockKey_FullMethodName        = "/admin.v1.Admin/LockKey"
	Admin_UnlockKey_FullMethodName      = "/admin.v1.Admin/UnlockKey"
	Admin_RotateApiKey_FullMethodName   = "/admin.v1.Admin/RotateApiKey"
	Admin_GenerateApiKey_FullMethodName = "/admin.v1.Admin/GenerateApiKey"
)

// AdminClient is the client API for Admin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdminClient interface {
	LockKey(ctx context.Context, in *LockKeyRequest, opts ...grpc.CallOption) (*LockKeyResponse, error)
	UnlockKey(ctx context.Context, in *UnlockKeyRequest, opts ...grpc.CallOption) (*UnlockKeyResponse, error)
	RotateApiKey(ctx context.Context, in *RotateApiKeyRequest, opts ...grpc.CallOption) (*RotateApiKeyResponse, error)
	// GenerateApiKey this is for generating API key for previously generated keys which did not have API key. It should fail for keys which already has API Key
	GenerateApiKey(ctx context.Context, in *GenerateApiKeyRequest, opts ...grpc.CallOption) (*GenerateApiKeyResponse, error)
}

type adminClient struct {
	cc grpc.ClientConnInterface
}

func NewAdminClient(cc grpc.ClientConnInterface) AdminClient {
	return &adminClient{cc}
}

func (c *adminClient) LockKey(ctx context.Context, in *LockKeyRequest, opts ...grpc.CallOption) (*LockKeyResponse, error) {
	out := new(LockKeyResponse)
	err := c.cc.Invoke(ctx, Admin_LockKey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) UnlockKey(ctx context.Context, in *UnlockKeyRequest, opts ...grpc.CallOption) (*UnlockKeyResponse, error) {
	out := new(UnlockKeyResponse)
	err := c.cc.Invoke(ctx, Admin_UnlockKey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) RotateApiKey(ctx context.Context, in *RotateApiKeyRequest, opts ...grpc.CallOption) (*RotateApiKeyResponse, error) {
	out := new(RotateApiKeyResponse)
	err := c.cc.Invoke(ctx, Admin_RotateApiKey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GenerateApiKey(ctx context.Context, in *GenerateApiKeyRequest, opts ...grpc.CallOption) (*GenerateApiKeyResponse, error) {
	out := new(GenerateApiKeyResponse)
	err := c.cc.Invoke(ctx, Admin_GenerateApiKey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdminServer is the server API for Admin service.
// All implementations must embed UnimplementedAdminServer
// for forward compatibility
type AdminServer interface {
	LockKey(context.Context, *LockKeyRequest) (*LockKeyResponse, error)
	UnlockKey(context.Context, *UnlockKeyRequest) (*UnlockKeyResponse, error)
	RotateApiKey(context.Context, *RotateApiKeyRequest) (*RotateApiKeyResponse, error)
	// GenerateApiKey this is for generating API key for previously generated keys which did not have API key. It should fail for keys which already has API Key
	GenerateApiKey(context.Context, *GenerateApiKeyRequest) (*GenerateApiKeyResponse, error)
	mustEmbedUnimplementedAdminServer()
}

// UnimplementedAdminServer must be embedded to have forward compatible implementations.
type UnimplementedAdminServer struct {
}

func (UnimplementedAdminServer) LockKey(context.Context, *LockKeyRequest) (*LockKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LockKey not implemented")
}
func (UnimplementedAdminServer) UnlockKey(context.Context, *UnlockKeyRequest) (*UnlockKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnlockKey not implemented")
}
func (UnimplementedAdminServer) RotateApiKey(context.Context, *RotateApiKeyRequest) (*RotateApiKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RotateApiKey not implemented")
}
func (UnimplementedAdminServer) GenerateApiKey(context.Context, *GenerateApiKeyRequest) (*GenerateApiKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateApiKey not implemented")
}
func (UnimplementedAdminServer) mustEmbedUnimplementedAdminServer() {}

// UnsafeAdminServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdminServer will
// result in compilation errors.
type UnsafeAdminServer interface {
	mustEmbedUnimplementedAdminServer()
}

func RegisterAdminServer(s grpc.ServiceRegistrar, srv AdminServer) {
	s.RegisterService(&Admin_ServiceDesc, srv)
}

func _Admin_LockKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LockKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).LockKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_LockKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).LockKey(ctx, req.(*LockKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_UnlockKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnlockKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).UnlockKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_UnlockKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).UnlockKey(ctx, req.(*UnlockKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_RotateApiKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RotateApiKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).RotateApiKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_RotateApiKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).RotateApiKey(ctx, req.(*RotateApiKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GenerateApiKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateApiKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GenerateApiKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_GenerateApiKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GenerateApiKey(ctx, req.(*GenerateApiKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Admin_ServiceDesc is the grpc.ServiceDesc for Admin service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Admin_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "admin.v1.Admin",
	HandlerType: (*AdminServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LockKey",
			Handler:    _Admin_LockKey_Handler,
		},
		{
			MethodName: "UnlockKey",
			Handler:    _Admin_UnlockKey_Handler,
		},
		{
			MethodName: "RotateApiKey",
			Handler:    _Admin_RotateApiKey_Handler,
		},
		{
			MethodName: "GenerateApiKey",
			Handler:    _Admin_GenerateApiKey_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "admin.proto",
}
