// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: admin.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Admin_LockKey_FullMethodName           = "/admin.v1.Admin/LockKey"
	Admin_UnlockKey_FullMethodName         = "/admin.v1.Admin/UnlockKey"
	Admin_GenerateNewApiKey_FullMethodName = "/admin.v1.Admin/GenerateNewApiKey"
	Admin_ListAllKeys_FullMethodName       = "/admin.v1.Admin/ListAllKeys"
)

// AdminClient is the client API for Admin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdminClient interface {
	LockKey(ctx context.Context, in *LockKeyRequest, opts ...grpc.CallOption) (*LockKeyResponse, error)
	UnlockKey(ctx context.Context, in *UnlockKeyRequest, opts ...grpc.CallOption) (*UnlockKeyResponse, error)
	GenerateNewApiKey(ctx context.Context, in *GenerateNewApiKeyRequest, opts ...grpc.CallOption) (*GenerateNewApiKeyResponse, error)
	ListAllKeys(ctx context.Context, in *ListAllKeysRequest, opts ...grpc.CallOption) (*ListAllKeysResponse, error)
}

type adminClient struct {
	cc grpc.ClientConnInterface
}

func NewAdminClient(cc grpc.ClientConnInterface) AdminClient {
	return &adminClient{cc}
}

func (c *adminClient) LockKey(ctx context.Context, in *LockKeyRequest, opts ...grpc.CallOption) (*LockKeyResponse, error) {
	out := new(LockKeyResponse)
	err := c.cc.Invoke(ctx, Admin_LockKey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) UnlockKey(ctx context.Context, in *UnlockKeyRequest, opts ...grpc.CallOption) (*UnlockKeyResponse, error) {
	out := new(UnlockKeyResponse)
	err := c.cc.Invoke(ctx, Admin_UnlockKey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GenerateNewApiKey(ctx context.Context, in *GenerateNewApiKeyRequest, opts ...grpc.CallOption) (*GenerateNewApiKeyResponse, error) {
	out := new(GenerateNewApiKeyResponse)
	err := c.cc.Invoke(ctx, Admin_GenerateNewApiKey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) ListAllKeys(ctx context.Context, in *ListAllKeysRequest, opts ...grpc.CallOption) (*ListAllKeysResponse, error) {
	out := new(ListAllKeysResponse)
	err := c.cc.Invoke(ctx, Admin_ListAllKeys_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdminServer is the server API for Admin service.
// All implementations must embed UnimplementedAdminServer
// for forward compatibility
type AdminServer interface {
	LockKey(context.Context, *LockKeyRequest) (*LockKeyResponse, error)
	UnlockKey(context.Context, *UnlockKeyRequest) (*UnlockKeyResponse, error)
	GenerateNewApiKey(context.Context, *GenerateNewApiKeyRequest) (*GenerateNewApiKeyResponse, error)
	ListAllKeys(context.Context, *ListAllKeysRequest) (*ListAllKeysResponse, error)
	mustEmbedUnimplementedAdminServer()
}

// UnimplementedAdminServer must be embedded to have forward compatible implementations.
type UnimplementedAdminServer struct {
}

func (UnimplementedAdminServer) LockKey(context.Context, *LockKeyRequest) (*LockKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LockKey not implemented")
}
func (UnimplementedAdminServer) UnlockKey(context.Context, *UnlockKeyRequest) (*UnlockKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnlockKey not implemented")
}
func (UnimplementedAdminServer) GenerateNewApiKey(context.Context, *GenerateNewApiKeyRequest) (*GenerateNewApiKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateNewApiKey not implemented")
}
func (UnimplementedAdminServer) ListAllKeys(context.Context, *ListAllKeysRequest) (*ListAllKeysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAllKeys not implemented")
}
func (UnimplementedAdminServer) mustEmbedUnimplementedAdminServer() {}

// UnsafeAdminServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdminServer will
// result in compilation errors.
type UnsafeAdminServer interface {
	mustEmbedUnimplementedAdminServer()
}

func RegisterAdminServer(s grpc.ServiceRegistrar, srv AdminServer) {
	s.RegisterService(&Admin_ServiceDesc, srv)
}

func _Admin_LockKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LockKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).LockKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_LockKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).LockKey(ctx, req.(*LockKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_UnlockKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnlockKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).UnlockKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_UnlockKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).UnlockKey(ctx, req.(*UnlockKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GenerateNewApiKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateNewApiKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GenerateNewApiKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_GenerateNewApiKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GenerateNewApiKey(ctx, req.(*GenerateNewApiKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_ListAllKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAllKeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).ListAllKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_ListAllKeys_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).ListAllKeys(ctx, req.(*ListAllKeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Admin_ServiceDesc is the grpc.ServiceDesc for Admin service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Admin_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "admin.v1.Admin",
	HandlerType: (*AdminServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LockKey",
			Handler:    _Admin_LockKey_Handler,
		},
		{
			MethodName: "UnlockKey",
			Handler:    _Admin_UnlockKey_Handler,
		},
		{
			MethodName: "GenerateNewApiKey",
			Handler:    _Admin_GenerateNewApiKey_Handler,
		},
		{
			MethodName: "ListAllKeys",
			Handler:    _Admin_ListAllKeys_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "admin.proto",
}
